code = { SOI ~ (statement | CRLF)* ~ EOI }

statement = { (if_expr | instr | assignment) ~ semicolon }

instr_name     = { word }
instr          = { instr_name ~ open_bracket ~ parameter_list ~ closing_bracket }
parameter_list = { (parameter ~ ("," ~ " "+ ~ parameter)*)? }
parameter      = { expression }
expression     = { instr | operation | primitive | variable }

assignment =  { variable ~ " "* ~ assign ~ " "* ~ expression }
assign     = _{ "=" }
variable   =  { alpha+ }

if_expr    = {
    "if" ~ open_bracket ~ comparison ~ closing_bracket ~ opening_block ~ statements ~ closing_block ~ CRLF* ~ else_expr?
}
else_expr  = {
    "else" ~ opening_block ~ statements ~ closing_block
}
statements = { (" "* ~ statement | CRLF)* }

primitive = { string | number | bool }

string = { "\"" ~ (char | " ")* ~ "\"" }
number = { digit+ }
bool   = { true | false }
true   = { "true" }
false  = { "false" }

operation = { comparison | sum }
sum       = { product ~ ((add | sub) ~ product)* }
product   = { value ~ ((mul | div | modulo) ~ value)* }

value = { (instr | primitive | variable) | ("(" ~ operation ~ ")") }

add    = { "+" }
sub    = { "-" }
mul    = { "*" }
div    = { "/" }
modulo = { "%" }

comparison = { value ~ equals ~ value }
equals     = { "==" }

semicolon       = _{ ";" }
open_bracket    = _{ "(" }
closing_bracket = _{ ")" }
opening_block   = _{ "{" }
closing_block   = _{ "}" }

word  =  { char+ }
char  = _{ digit | alpha }
alpha =  { 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
CRLF  = _{ "\r"? ~ "\n" | "\r" | "\n" }